-- Global control variable
getgenv().enabled = true

-- Services
local rs = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local lp = players.LocalPlayer
local blockService = rs.Packages.Knit.Services.BlockService.RF.DamageBlock

-- Local variables
local char = lp.Character or lp.CharacterAdded:Wait()
local lastPosition = nil
local isFarmingActive = false -- Prevent multiple farming loops

-- Function: Respawn if character is dead
local function respawnIfDead()
    while not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") do
        if not getgenv().enabled then return end
        lp.CharacterAdded:Wait()
        char = lp.Character
        wait(0.5)
    end
end

-- Function: Break block
local function breakBlock(node, matchedIslandPart)
    if not getgenv().enabled then return end
    if matchedIslandPart and node and node.Parent then
        local args = {
            [1] = 48,
            [2] = {
                ["Level"] = 9,
                ["Index"] = tonumber(node.Name),
                ["World"] = "Mines"
            }
        }

        local hrp = lp.Character:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(matchedIslandPart.Position)
        wait(0.1)

        local success, err = pcall(function()
            blockService:InvokeServer(unpack(args))
        end)
        if not success then
            warn("Error while breaking block:", err)
        end

        repeat
            wait(0.05)
        until not matchedIslandPart.Parent or not getgenv().enabled
    end
end

-- Function: Match island part
local function matchIslandPart(nodePosition, islandParts)
    for _, part in ipairs(islandParts) do
        if not getgenv().enabled then return nil end
        if part:IsA("BasePart") and part.Position == nodePosition then
            return part
        end
    end
    return nil
end

-- Function: Farm flowers
local function farmFlowers()
    if isFarmingActive then return end -- Prevent duplicate loops
    isFarmingActive = true

    while getgenv().enabled do
        respawnIfDead()

        local success, err = pcall(function()
            local nodes = game.Workspace.Nodes.Mines["9"]:GetChildren()
            local islandParts = game.Workspace.Island:GetDescendants()

            for _, node in ipairs(nodes) do
                if not getgenv().enabled then return end
                if node:IsA("BasePart") then
                    local matchedIslandPart = matchIslandPart(node.Position, islandParts)
                    breakBlock(node, matchedIslandPart)
                end
            end
        end)

        if not success then
            warn("Error in flower farming loop:", err)
            wait(0.5) -- Small cooldown to prevent rapid retries
        end

        wait(0.1)
    end

    isFarmingActive = false
    warn("Flower farm disabled.")
end

-- Function: Monitor position
local function monitorPosition()
    local restartDebounce = false

    while getgenv().enabled do
        local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local currentPosition = hrp.Position
            if lastPosition and (currentPosition - lastPosition).Magnitude < 0.1 and not restartDebounce then
                restartDebounce = true
                warn("Avatar not moving, restarting farming...")
                spawn(farmFlowers)
                wait(10) -- Debounce for 10 seconds
                restartDebounce = false
            end
            lastPosition = currentPosition
        end
        wait(5)
    end
end

spawn(function()
    while true do
        if getgenv().enabled then
            pcall(farmFlowers)
        else
            wait(1)
        end
    end
end)

spawn(monitorPosition)
